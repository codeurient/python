map mainMessage( <- Input::Message in, -> Output::RDEO11 out )
{
	//***************************************************************************************************
	//* 									C H A N G E   L O G                   						*
	//***************************************************************************************************
	//*	Date		Analyst		Description									      						*
	//***************************************************************************************************
	//*  2 Jan 24	Maury		Created																	*
	//***************************************************************************************************
	
	string sDx            = "";
	string sEndDttm       = "";
	string sNonActiveDTTM = "";
	string sPriority	  = "";
	string sStartDttm     = "";
	string sTW_MRN_OrdID  = "";
		
	for (int i = 0; i < sizeof(in.MED); i = i + 1)
	{
		sTW_MRN_OrdID = in.MED[i].APM_MRN + "_" + in.MED[i].OrderNumberEXT;
		
		// MSH segment
		out.MSH.SendingApplication.NamespaceID   = mshDefault_SendingApp_TW;									// MSH-3.1
		out.MSH.SendingFacility.NamespaceID      = defaultSendingFac;											// MSH-4.1
		out.MSH.ReceivingApplication.NamespaceID = mshDefault_ReceivingApp;										// MSH-5.1
		out.MSH.ReceivingApplication.UniversalID = mshDefault_ReceivingApp;										// MSH-5.2
		out.MSH.ReceivingFacility.NamespaceID    = mshDefault_ReceivingFac;										// MSH-6.1
		out.MSH.ReceivingFacility.UniversalID	 = mshDefault_ReceivingFac;										// MSH-6.2
		
		setEncodedValue(out.MSH.DateTimeOfMessage,  
					DateChangeFormat(CurrentDateTime(true), "MM/dd/yyyy HH:mm:ss", "HL7")); 					// MSH-7
									
		out.MSH.MessageType.MessageCode   = "RDE";																// MSH-9.1
		out.MSH.MessageType.TriggerEvent  = "O11";																// MSH-9.2
		out.MSH.MessageControlID          = sTW_MRN_OrdID;														// MSH-10
		out.MSH.ProcessingID.ProcessingID = mshDefault_ProcessingID;;											// MSH-11
		out.MSH.VersionID.VersionID       = mshDefault_VersionID;												// MSH-12
		
		// PID segment
		out.PID.PatientIdentifierList[0].IDNumber = in.MED[i].APM_MRN;											// PID-3.1
		out.PID.PatientIdentifierList[0].IdentifierTypeCode = defaultMRNID;										// PID-3.5
		out.PID.PatientName[0].FamilyName.Surname = in.MED[i].APM_Patient_Last_Name;							// PID-5.1
		out.PID.PatientName[0].GivenName = in.MED[i].APM_Patient_First_Name;									// PID-5.2
		out.PID.PatientName[0].MiddleInitialOrName = in.MED[i].APM_Patient_MI;									// PID-5.3
		
		setEncodedValue(out.PID.DateTimeOfBirth, 
			DateChangeFormat(StrLeft(in.MED[i].APM_Patient_DOB, 10),"yyyy-MM-dd", "yyyyMMdd"));					// PID-7
			
		out.PID.AdministrativeSex = in.MED[i].APM_Patient_Sex;													// PID-8
		out.PID.PatientAddress[0].StreetAddress.StreetOrMailingAddress = in.MED[i].APM_Patient_Street1;			// PID-11.1
		out.PID.PatientAddress[0].OtherDesignation = in.MED[i].APM_Patient_Street2;								// PID-11.2
		out.PID.PatientAddress[0].City = in.MED[i].APM_Patient_City;											// PID-11.3
		out.PID.PatientAddress[0].StateOrProvince = StrTrim(in.MED[i].APM_Patient_State);						// PID-11.4
		out.PID.PatientAddress[0].ZipOrPostalCode = in.MED[i].APM_Patient_Zip_Code;								// PID-11.5
		out.PID.HomePhoneNumber[0].PhoneNumberString_DEPRECATED_FROM_2_3 = in.MED[i].APM_HomePhone;				// PID-13.1
		
		if ((StrSize(in.MED[i].APM_Email) > 0) && (in.MED[i].APM_Email != "NULL"))
		{
			out.PID.HomePhoneNumber[0].EmailAddress = in.MED[i].APM_Email;										// PID-13.4
		}
		
		out.PID.PatientAccountNumber.IDNumber = defaultModifier + in.MED[i].EncounterID;						// PID-18
		
		if (StrToLower(in.MED[i].OrderStatusName) == "active")
		{
			sPriority   = "R";		// routine
			giNonActive = 99;
		}
		else
		{
			sPriority = "H";		// historical med
			
			// remove any letters or punctuation from the MRN
			// then divide the result by 10  to strip trailing zero (present in many MRN in NWP)
			// then divide the result by 3 to get the remainder (i.e., modulo 3) which will be used for load balancing
			giNonActive = (StrToInt(StrNumbers(in.MED[i].APM_MRN)) / 10) % 3;
		}
		
		out.Order[0].ORC.OrderControl = "NW";																			// ORC-1
	
		if ((StrSize(StrTrim(in.MED[i].PrescriptionNumber)) > 2) &&
		    (StrToUpper(StrTrim(in.MED[i].PrescriptionNumber)) != "NULL"))
		{
			out.Order[0].ORC.FillerOrderNumber.EntityIdentifier = defaultModifier + "-" + in.MED[i].PrescriptionNumber;	// ORC-3.1
			out.Order[0].RXE.PrescriptionNumber = defaultModifier + "-" + in.MED[i].PrescriptionNumber;					// RXE-15
		}
		else
		{
			if ((StrSize(StrTrim(in.MED[i].OrderNumberEXT)) > 2) &&
				(StrToUpper(StrTrim(in.MED[i].OrderNumberEXT)) != "NULL"))
			{
				out.Order[0].ORC.FillerOrderNumber.EntityIdentifier = defaultModifier + "-" + in.MED[i].OrderNumberEXT;	// ORC-3.1		
				out.Order[0].RXE.PrescriptionNumber = defaultModifier + "-" + in.MED[i].OrderNumberEXT;					// RXE-15
			}
			else
			{
				if ((StrSize(StrTrim(in.MED[i].CurrentID)) > 0) &&
					(StrToUpper(StrTrim(in.MED[i].CurrentID)) != "NULL"))
				{
					out.Order[0].ORC.FillerOrderNumber.EntityIdentifier = defaultModifier + "-" + in.MED[i].CurrentID;	// ORC-3.1		
					out.Order[0].RXE.PrescriptionNumber = defaultModifier + "-" + in.MED[i].CurrentID;					// RXE-15
				}
				else
				{
					// suppress a message with no order number and no prescription number
					gbValidMsg = false;
				}
			}
		}
		
		if (gbValidMsg == true)
		{
			// append last five characters of the MRN to ensure uniqueness across patients
			out.Order[0].ORC.FillerOrderNumber.EntityIdentifier = out.Order[0].ORC.FillerOrderNumber.EntityIdentifier + "-" + 
				StrTrim(in.MED[i].MedicationNDC_Code) +	"-" + StrRight(in.MED[i].APM_MRN,5);									// ORC-3.1		
				
			out.Order[0].RXE.PrescriptionNumber 				= out.Order[0].RXE.PrescriptionNumber  + "-" +
				StrTrim(in.MED[i].MedicationNDC_Code) + "-" + StrRight(in.MED[i].APM_MRN,5);									// RXE-15
		}
		
		// Therapy Start Date-Time Hierarchy
		//	1 TherapyStartedDTTM
		//	2 PerformedDTTM
		//	3 TherapyEndDTTM
		//	4 ClinicalDTTM
		//  5 Current (system) DTTM
		// don't attempt to map NULL or dates in 1900
		if ((StrSize(in.MED[i].TherapyStartedDTTM) > 0) &&
			(in.MED[i].TherapyStartedDTTM != "NULL") &&
			(StrLeft(in.MED[i].TherapyStartedDTTM, 2) != "21") &&
			(StrLeft(in.MED[i].TherapyStartedDTTM, 4) != "1900"))
		{
			if (StrMid(in.MED[i].TherapyStartedDTTM, 11, 8) == "00:00:00")
			{
				setEncodedValue(out.Order[0].ORC.QuantityTiming[0].StartDateTime,  
				  DateChangeFormat(StrLeft(in.MED[i].TherapyStartedDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 	// ORC-7.4
				
				setEncodedValue(out.Order[0].RXE.QuantityTiming.StartDateTime,  
				  DateChangeFormat(StrLeft(in.MED[i].TherapyStartedDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 	// RXE-1.4
			}
			else
			{
				setEncodedValue(out.Order[0].ORC.QuantityTiming[0].StartDateTime,  
				  DateChangeFormat(StrLeft(in.MED[i].TherapyStartedDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 	// ORC-7.4
				
				setEncodedValue(out.Order[0].RXE.QuantityTiming.StartDateTime,  
				  DateChangeFormat(StrLeft(in.MED[i].TherapyStartedDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 	// RXE-1.4
			}
		}
		else
		{
			// if no start date is provided, attempt to use the Performed DTTM
			if ((StrSize(in.MED[i].PerformedDTTM) > 0) &&
		   		(in.MED[i].PerformedDTTM != "NULL") &&
		   		(StrLeft(in.MED[i].PerformedDTTM, 2) != "21") &&
		   		(StrLeft(in.MED[i].PerformedDTTM, 4) != "1900"))
			{		
				if (StrMid(in.MED[i].PerformedDTTM, 11, 8) == "00:00:00")
				{
					setEncodedValue(out.Order[0].ORC.QuantityTiming[0].StartDateTime,  
				 	 DateChangeFormat(StrLeft(in.MED[i].PerformedDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 			// ORC-7.4
			
					setEncodedValue(out.Order[0].RXE.QuantityTiming.StartDateTime,  
				 	 DateChangeFormat(StrLeft(in.MED[i].PerformedDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 			// RXE-1.4
				}
				else
				{
					setEncodedValue(out.Order[0].ORC.QuantityTiming[0].StartDateTime,  
				 	 DateChangeFormat(StrLeft(in.MED[i].PerformedDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 		// ORC-7.4
			
					setEncodedValue(out.Order[0].RXE.QuantityTiming.StartDateTime,  
				  	  DateChangeFormat(StrLeft(in.MED[i].PerformedDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 		// RXE-1.4
				}
			}
			else
			{
				// if no Performed date is provided, attempt to use the end date
				if ((StrSize(in.MED[i].TherapyEndDTTM) > 0) &&
		   			(in.MED[i].TherapyEndDTTM != "NULL") &&
		   			(StrLeft(in.MED[i].TherapyEndDTTM, 2) != "21") &&
		   			(StrLeft(in.MED[i].TherapyEndDTTM, 4) != "1900"))
				{		
					if (StrMid(in.MED[i].TherapyEndDTTM, 11, 8) == "00:00:00")
					{
						setEncodedValue(out.Order[0].ORC.QuantityTiming[0].StartDateTime,  
				 		 DateChangeFormat(StrLeft(in.MED[i].TherapyEndDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 			// ORC-7.4
			
						setEncodedValue(out.Order[0].RXE.QuantityTiming.StartDateTime,  
				 	 	DateChangeFormat(StrLeft(in.MED[i].TherapyEndDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 			// RXE-1.4
					}
					else
					{
						setEncodedValue(out.Order[0].ORC.QuantityTiming[0].StartDateTime,  
				 	 	  DateChangeFormat(StrLeft(in.MED[i].TherapyEndDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 		// ORC-7.4
			
						setEncodedValue(out.Order[0].RXE.QuantityTiming.StartDateTime,  
				  	  	  DateChangeFormat(StrLeft(in.MED[i].TherapyEndDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 		// RXE-1.4
					}
				}
				else
				{
					// if there is no valid therapy end date provided, use Clinical DTTM or the current date-time to the nearest minute
					if ((StrSize(in.MED[i].ClinicalDTTM) > 0) &&
				    	(in.MED[i].ClinicalDTTM != "NULL") &&
				    	(StrLeft(in.MED[i].ClinicalDTTM, 2) != "21") &&
						(StrLeft(in.MED[i].ClinicalDTTM, 4) != "1900"))
					{	
						setEncodedValue(out.Order[0].ORC.QuantityTiming[0].StartDateTime,  
					  	  DateChangeFormat(StrLeft(in.MED[i].ClinicalDTTM, 19), "yyyy-MM-dd HH:mm:ss", "yyyyMMddHHmm")); // ORC-7.4
					  
						setEncodedValue(out.Order[0].RXE.QuantityTiming.StartDateTime,  
				  	  	  DateChangeFormat(StrLeft(in.MED[i].ClinicalDTTM, 19), "yyyy-MM-dd HH:mm:ss", "yyyyMMddHHmm")); // RXE-1.4
					}
					else
					{
						setEncodedValue(out.Order[0].ORC.QuantityTiming[0].StartDateTime,  
					  	  DateChangeFormat(CurrentDateTime(true), "MM/dd/yyyy HH:mm:ss", "yyyyMMddHHmm")); 				// ORC-7.4
				
						setEncodedValue(out.Order[0].RXE.QuantityTiming.StartDateTime,  
				  	      DateChangeFormat(CurrentDateTime(true), "MM/dd/yyyy HH:mm:ss", "yyyyMMddHHmm")); 				// RXE-1.4
					}
				}
			}
		}
			
		if ((StrSize(in.MED[i].TherapyEndDTTM) > 0) &&
		   (in.MED[i].TherapyEndDTTM != "NULL") &&
		   (StrLeft(in.MED[i].TherapyEndDTTM, 2) != "21") &&
		   (StrLeft(in.MED[i].TherapyEndDTTM, 4) != "1900"))
		{		
			if (StrMid(in.MED[i].TherapyEndDTTM, 11, 8) == "00:00:00")
			{
				setEncodedValue(out.Order[0].ORC.QuantityTiming[0].EndDateTime,  
				  DateChangeFormat(StrLeft(in.MED[i].TherapyEndDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 		// ORC-7.5
			
				setEncodedValue(out.Order[0].RXE.QuantityTiming.EndDateTime,  
				  DateChangeFormat(StrLeft(in.MED[i].TherapyEndDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 		// RXE-1.5
			}
			else
			{
				setEncodedValue(out.Order[0].ORC.QuantityTiming[0].EndDateTime,  
				  DateChangeFormat(StrLeft(in.MED[i].TherapyEndDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 		// ORC-7.5
			
				setEncodedValue(out.Order[0].RXE.QuantityTiming.EndDateTime,  
				  DateChangeFormat(StrLeft(in.MED[i].TherapyEndDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 		// RXE-1.5
			}
		}
		else
		{
			// if there is no valid therapy end date provided, use Clinical DTTM or the current date-time to the nearest minute
			if (giNonActive != 99)
			{
				if ((StrSize(in.MED[i].ClinicalDTTM) > 0) &&
				    (in.MED[i].ClinicalDTTM != "NULL") &&
				    (StrLeft(in.MED[i].ClinicalDTTM, 2) != "21") &&
					(StrLeft(in.MED[i].ClinicalDTTM, 4) != "1900"))
				{	
					setEncodedValue(out.Order[0].ORC.QuantityTiming[0].EndDateTime,  
					  DateChangeFormat(StrLeft(in.MED[i].ClinicalDTTM, 19), "yyyy-MM-dd HH:mm:ss", "yyyyMMddHHmm")); 	// ORC-7.5
					  
					setEncodedValue(out.Order[0].RXE.QuantityTiming.EndDateTime,  
				  	  DateChangeFormat(StrLeft(in.MED[i].ClinicalDTTM, 19), "yyyy-MM-dd HH:mm:ss", "yyyyMMddHHmm")); 	// RXE-1.5
				}
				else
				{
					setEncodedValue(out.Order[0].ORC.QuantityTiming[0].EndDateTime,  
					  DateChangeFormat(CurrentDateTime(true), "MM/dd/yyyy HH:mm:ss", "yyyyMMddHHmm")); 				// ORC-7.5
				
					setEncodedValue(out.Order[0].RXE.QuantityTiming.EndDateTime,  
				  	  DateChangeFormat(CurrentDateTime(true), "MM/dd/yyyy HH:mm:ss", "yyyyMMddHHmm")); 				// RXE-1.5
				}
			}
		}
		
		// if there is an End DTTM, make sure End DTTM is equal to or after Start DTTM
		sStartDttm = getEncodedValue(out.Order[0].ORC.QuantityTiming[0].StartDateTime);
		sEndDttm = getEncodedValue(out.Order[0].ORC.QuantityTiming[0].EndDateTime);
		
		if (StrSize(sStartDttm) == 8)
		{
			sStartDttm = sStartDttm + "000000";
		}
		
		if (StrSize(sEndDttm) == 8)
		{
			sEndDttm = sEndDttm + "000000";
		}
		
		if ((StrSize(sEndDttm) > 0) && (StrToDbl(sStartDttm) > StrToDbl(sEndDttm)))
		{
			setEncodedValue(out.Order[0].ORC.QuantityTiming[0].StartDateTime, getEncodedValue(out.Order[0].ORC.QuantityTiming[0].EndDateTime));
			setEncodedValue(out.Order[0].RXE.QuantityTiming.StartDateTime, getEncodedValue(out.Order[0].ORC.QuantityTiming[0].EndDateTime));
		}
		
		if (StrSize(in.MED[i].OrderPriorityName) > 0)
		{
			out.Order[0].ORC.QuantityTiming[0].Priority = in.MED[i].OrderPriorityName;							// ORC-7.6
			out.Order[0].RXE.QuantityTiming.Priority = in.MED[i].OrderPriorityName;								// RXE-1.6
		}
		else
		{
			out.Order[0].ORC.QuantityTiming[0].Priority = sPriority;											// ORC-7.6
			out.Order[0].RXE.QuantityTiming.Priority = sPriority;												// RXE-1.6
		}
		
		if (in.MED[i].PRNFlag == "Y")
		{
			if (StrSize(in.MED[i].PRN) > 0)
			{
				out.Order[0].ORC.QuantityTiming[0].Condition = in.MED[i].PRN;									// ORC-7.7
				out.Order[0].RXE.QuantityTiming.Condition = in.MED[i].PRN;										// RXE-1.7
			}
			else
			{
				out.Order[0].ORC.QuantityTiming[0].Condition = "PRN";											// ORC-7.7
				out.Order[0].RXE.QuantityTiming.Condition = "PRN";												// RXE-1.7
			}
		}				
		
		if ((StrSize(in.MED[i].CreatedDTTM) > 0) &&
		    (in.MED[i].CreatedDTTM != "NULL") &&
			(StrLeft(in.MED[i].CreatedDTTM, 4) != "1900"))
		{	
			if (StrMid(in.MED[i].CreatedDTTM, 11, 8) == "00:00:00")
			{
				setEncodedValue(out.Order[0].ORC.DateTimeOfTransaction,  
				  DateChangeFormat(StrLeft(in.MED[i].CreatedDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 				// ORC-9
			}
			else
			{
				setEncodedValue(out.Order[0].ORC.DateTimeOfTransaction,  
				  DateChangeFormat(StrLeft(in.MED[i].CreatedDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 			// ORC-9
			}
				
			sNonActiveDTTM = DateChangeFormat(StrLeft(in.MED[i].CreatedDTTM, 19), "yyyy-MM-dd HH:mm:ss", "MM/dd/yyyy hh:mma");
		}
		else
		{
			if ((StrSize(in.MED[i].ClinicalDTTM) > 0) &&
			   (in.MED[i].ClinicalDTTM != "NULL") &&
			   (StrLeft(in.MED[i].ClinicalDTTM, 4) != "1900"))
			{	
				if (StrMid(in.MED[i].ClinicalDTTM, 11, 8) == "00:00:00")
				{
					setEncodedValue(out.Order[0].ORC.DateTimeOfTransaction,  
						DateChangeFormat(StrLeft(in.MED[i].ClinicalDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 			// ORC-9
				}
				else
				{
					setEncodedValue(out.Order[0].ORC.DateTimeOfTransaction,  
						DateChangeFormat(StrLeft(in.MED[i].ClinicalDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 		// ORC-9
				}
					
					
				sNonActiveDTTM = DateChangeFormat(StrLeft(in.MED[i].ClinicalDTTM, 19), "yyyy-MM-dd HH:mm:ss", "MM/dd/yyyy hh:mma");
			}
			else
			{
				if ((StrSize(in.MED[i].LastUpdateDTTM) > 0) && 
				    (in.MED[i].LastUpdateDTTM != "NULL") &&
					(StrLeft(in.MED[i].LastUpdateDTTM, 4) != "1900"))
				{	
					if (StrMid(in.MED[i].LastUpdateDTTM, 11, 8) == "00:00:00")
					{
						setEncodedValue(out.Order[0].ORC.DateTimeOfTransaction,  
						  DateChangeFormat(StrLeft(in.MED[i].LastUpdateDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 	// ORC-9
					}
					else
					{
						setEncodedValue(out.Order[0].ORC.DateTimeOfTransaction,  
						  DateChangeFormat(StrLeft(in.MED[i].LastUpdateDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 	// ORC-9
					}					
					sNonActiveDTTM = DateChangeFormat(StrLeft(in.MED[i].LastUpdateDTTM, 19), "yyyy-MM-dd HH:mm:ss", "MM/dd/yyyy hh:mma");
				}
			}
		}
			
		if (StrSize(StrTrim(in.MED[i].OrderingProviderNPI)) > 0)
		{
			out.Order[0].ORC.OrderingProvider[0].IDNumber = StrTrim(in.MED[i].OrderingProviderNPI);			// ORC-12.1
			out.Order[0].ORC.OrderingProvider[0].FamilyName.Surname = in.MED[i].OrderingProviderLastName;	// ORC-12.2.1
			out.Order[0].ORC.OrderingProvider[0].GivenName = in.MED[i].OrderingProviderfirstName;			// ORC-12.3
			out.Order[0].ORC.OrderingProvider[0].AssigningAuthority.NamespaceID	= "NPI";					// ORC-12.9.1		
			out.Order[0].ORC.OrderingProvider[0].IdentifierTypeCode	= "NPI";								// ORC-12.13				
		}
		else
		{
			// use legacy provider 
			out.Order[0].ORC.OrderingProvider[0].IDNumber = defaultProvID;									// ORC-12.1
			out.Order[0].ORC.OrderingProvider[0].FamilyName.Surname = defaultProvLName;						// ORC-12.2.1
			out.Order[0].ORC.OrderingProvider[0].GivenName = defaultProvFName;								// ORC-12.3
			out.Order[0].ORC.OrderingProvider[0].AssigningAuthority.NamespaceID = asgnAuth_OCMW_Provider; 	// ORC-12.9.1
			out.Order[0].ORC.OrderingProvider[0].IdentifierTypeCode = idType_OCMW_Provider;					// ORC-12.13
		}
		
		out.Order[0].RXE.GiveCode.Identifier = StrTrim(in.MED[i].MedicationNDC_Code);						// RXE-2.1 
		out.Order[0].RXE.GiveCode.Text = in.MED[i].Medication;												// RXE-2.2
		out.Order[0].RXE.GiveCode.NameOfCodingSystem = "NDC";												// RXE-2.3
		
		
		if (StrSize(in.MED[i].Dose) == StrSize(StrNumbers(in.MED[i].Dose)))
		{
			out.Order[0].RXE.MinimumGiveAmount = StrToDbl(in.MED[i].Dose);									// RXE-3
			
			if (out.Order[0].RXE.MinimumGiveAmount == 0)
			{
				setEmpty(out.Order[0].RXE.MinimumGiveAmount);
			}
			else
			{
				if (StrSize(in.MED[i].UnitOfMeasure) > 0)
				{
					out.Order[0].RXE.GiveUnits.Identifier = StrToLower(StrTrim(in.MED[i].UnitOfMeasure));	// RXE-5.1 but only if RXE-3 has a value
				}
			}
		}
		else
		{
			setEmpty(out.Order[0].RXE.MinimumGiveAmount);													// RXE-3
			setEmpty(out.Order[0].RXE.MaximumGiveAmount);													// RXE-4
		}
		
		out.Order[0].RXE.ProvidersAdministrationInstructions[0].Text = in.MED[i].FreeTextSIG;				// RXE-7.2
		
		// in TW, the DAWFLAG is Y or N
		// in Epic, the field for DAW is expecting N (no substitutes) or G (generics allowed)
		if (StrSize(in.MED[i].DAWFLAG) > 0)
		{
			if (in.MED[i].DAWFLAG == "Y")
			{
				out.Order[0].RXE.SubstitutionStatus = "N";													// RXE-9
			}
			else
			{
				out.Order[0].RXE.SubstitutionStatus = "G";													// RXE-9
			}
		}
		
		out.Order[0].RXE.DispenseAmount = StrToDbl(in.MED[i].QuantityToDispense);							// RXE-10
		
		if ((StrSize(in.MED[i].PkgTxt) > 0) && (in.MED[i].PkgTxt != "NULL"))
		{
			out.Order[0].RXE.DispenseUnits.Identifier = StrToLower(in.MED[i].PkgTxt);						// RXE-11.1
			out.Order[0].RXE.DispenseUnits.Text = in.MED[i].PkgTxt;											// RXE-11.2
		}
		
		out.Order[0].RXE.NumberOfRefills = StrToDbl(in.MED[i].Refill);										// RXE-12
				
		if ((StrSize(in.MED[i].PerformedDTTM) > 0) &&
		    (in.MED[i].PerformedDTTM != "NULL") &&
			(StrLeft(in.MED[i].PerformedDTTM, 4) != "1900"))
		{	
			if (StrMid(in.MED[i].PerformedDTTM, 11, 8) == "00:00:00")
			{
				setEncodedValue(out.Order[0].RXE.OriginalOrderDateTime,  
			      DateChangeFormat(StrLeft(in.MED[0].PerformedDTTM, 10), "yyyy-MM-dd", "yyyyMMdd")); 		// RXE-32
			}
			else
			{
				setEncodedValue(out.Order[0].RXE.OriginalOrderDateTime,  
			      DateChangeFormat(StrLeft(in.MED[0].PerformedDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 	// RXE-32
			}
		}
		else
		{
			setEncodedValue(out.Order[0].RXE.OriginalOrderDateTime,  
			  DateChangeFormat(StrLeft(in.MED[0].ClinicalDTTM, 19), "yyyy-MM-dd HH:mm:ss", "HL7")); 		// RXE-32
		}	
					
		// TQ1 segment
		if (StrSize(StrTrim(in.MED[i].FreqUnitsCode)) > 0)
		{
			out.Order[0].TQ1.RepeatPattern[0].RepeatPatternCode.Identifier = StrTrim(in.MED[i].FreqUnitsCode);			// TQ1-3.1.1
		}
		
		if (StrSize(StrTrim(in.MED[i].FreqUnitsName)) > 0)
		{
			out.Order[0].TQ1.RepeatPattern[0].RepeatPatternCode.Text = StrTrim(in.MED[i].FreqUnitsName);				// TQ1-3.1.2
		}
		
		if ((in.MED[i].Refill != "0") && (in.MED[i].DaysSupply != "0"))
		{
			out.Order[0].TQ1.ServiceDuration.Quantity = (StrToDbl(in.MED[i].Refill) * StrToDbl(in.MED[i].DaysSupply));	// TQ1-6
			out.Order[0].TQ1.ServiceDuration.Units.Identifier = "DAYS";													// TQ1-6.2.1
			out.Order[0].TQ1.ServiceDuration.Units.Text = "DAYS";														// TQ1-6.2.2
		}
		
		out.Order[0].TQ1.ConditionText = in.MED[i].PRN;																	// TQ1-10 
		
		// NTE segment
		if (giNonActive != 99)
		{	
			out.Order[0].NTE[0].SetID = 1;																	// NTE-1
			out.Order[0].NTE[0].SourceOfComment = defaultModifier;											// NTE-2
			out.Order[0].NTE[0].Comment[0] = "Converted from " + defaultModifier + ": " + 
										  		in.MED[i].OrderStatusName + " on " + sNonActiveDTTM;		// NTE-3
			out.Order[0].NTE[0].CommentType.Identifier 		   = "MN";										// NTE-4.1 MN = Medication Note; translated by R AIF 993359361		
		}
			
		// RXR segment
		out.Order[0].RXR.Route.Identifier = StrTrim(in.MED[i].RouteofAdminCode);							// RXR-1.1.1
		out.Order[0].RXR.Route.Text = StrTrim(in.MED[i].RouteofAdminName);									// RXR-1.1.2
		
		// DG1 segment
		if (StrSize(in.MED[i].Diagnoses) > 0)
		{
			for (int j = 0; j < StrFieldCount(in.MED[i].Diagnoses, ";"); j = j + 1)
			{
				sDx = StrFieldExtract(in.MED[i].Diagnoses, ";", j + 1);
				
				out.Order[0].DG1[j].SetID = j + 1;															// DG1-1
				out.Order[0].DG1[j].DxCode.Identifier = StrFieldExtract(sDx, " - ", 2);						// DG1-3.1
				out.Order[0].DG1[j].DxCode.Text = StrTrim(StrFieldExtract(sDx, " - ", 1));					// DG1-3.2
				out.Order[0].DG1[j].DxCode.NameOfCodingSystem = "I10";										// DG1-3.3
			}
		}
		
		// ZWO segment
		if (in.MED[i].DaysToTake != "0")
		{
			out.Order[0].ZXO.DaysInDurations.Text = in.MED[i].DaysToTake;									// ZWO-2.1
		}
	}
}
